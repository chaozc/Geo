type token =
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LSQUAR
  | RSQUAR
  | SEMI
  | COLON
  | GET
  | COMMA
  | ASSIGN
  | DOLL
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | PERCENT
  | EXP
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | NOT
  | AND
  | OR
  | BREAK
  | ELSE
  | END
  | FOR
  | FUNCTION
  | RETURN
  | RUN
  | WHILE
  | IF
  | IN
  | LINE
  | CIRCLE
  | RUNSET
  | POLYGON
  | TYPE of (string)
  | PRINT
  | PRINTT
  | ENDOFPROGRAM
  | EOF
  | INTEGERLIT of (int)
  | FLOATLIT of (float)
  | CHARLIT of (char)
  | BOOLLIT of (bool)
  | STRINGLIT of (string)
  | ID of (string)
  | PRESET of (string)

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 open Ast 
# 61 "parser.ml"
let yytransl_const = [|
  257 (* LPAREN *);
  258 (* RPAREN *);
  259 (* LBRACE *);
  260 (* RBRACE *);
  261 (* LSQUAR *);
  262 (* RSQUAR *);
  263 (* SEMI *);
  264 (* COLON *);
  265 (* GET *);
  266 (* COMMA *);
  267 (* ASSIGN *);
  268 (* DOLL *);
  269 (* PLUS *);
  270 (* MINUS *);
  271 (* TIMES *);
  272 (* DIVIDE *);
  273 (* PERCENT *);
  274 (* EXP *);
  275 (* EQ *);
  276 (* NEQ *);
  277 (* LT *);
  278 (* LEQ *);
  279 (* GT *);
  280 (* GEQ *);
  281 (* NOT *);
  282 (* AND *);
  283 (* OR *);
  284 (* BREAK *);
  285 (* ELSE *);
  286 (* END *);
  287 (* FOR *);
  288 (* FUNCTION *);
  289 (* RETURN *);
  290 (* RUN *);
  291 (* WHILE *);
  292 (* IF *);
  293 (* IN *);
  294 (* LINE *);
  295 (* CIRCLE *);
  296 (* RUNSET *);
  297 (* POLYGON *);
  299 (* PRINT *);
  300 (* PRINTT *);
  301 (* ENDOFPROGRAM *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  298 (* TYPE *);
  302 (* INTEGERLIT *);
  303 (* FLOATLIT *);
  304 (* CHARLIT *);
  305 (* BOOLLIT *);
  306 (* STRINGLIT *);
  307 (* ID *);
  308 (* PRESET *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\003\000\003\000\003\000\004\000\006\000\007\000\
\007\000\009\000\009\000\008\000\008\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\011\000\011\000\012\000\012\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\013\000\013\000\014\000\
\014\000\000\000"

let yylen = "\002\000\
\004\000\002\000\000\000\002\000\002\000\001\000\010\000\000\000\
\001\000\003\000\005\000\000\000\002\000\002\000\003\000\007\000\
\010\000\007\000\005\000\005\000\007\000\005\000\004\000\008\000\
\002\000\000\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\002\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\002\000\004\000\003\000\005\000\003\000\004\000\
\004\000\004\000\004\000\003\000\005\000\000\000\001\000\001\000\
\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\066\000\003\000\002\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\030\000\031\000\032\000\033\000\034\000\000\000\
\004\000\005\000\006\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\025\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\001\000\000\000\000\000\000\000\014\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\053\000\060\000\
\000\000\000\000\000\000\000\000\015\000\012\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\055\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\056\000\058\000\059\000\057\000\000\000\000\000\
\052\000\023\000\000\000\000\000\054\000\012\000\000\000\000\000\
\000\000\022\000\013\000\012\000\012\000\019\000\020\000\000\000\
\061\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000\
\021\000\000\000\000\000\018\000\000\000\016\000\000\000\012\000\
\011\000\012\000\024\000\000\000\000\000\007\000\017\000"

let yydgoto = "\002\000\
\004\000\005\000\007\000\033\000\139\000\035\000\118\000\120\000\
\119\000\036\000\000\000\000\000\040\000\041\000"

let yysindex = "\006\000\
\218\254\000\000\229\254\000\000\000\000\000\000\076\255\177\000\
\177\000\177\000\177\000\177\000\018\255\177\000\243\254\177\000\
\177\000\040\255\052\255\053\255\069\255\084\255\085\255\087\255\
\096\255\098\000\000\000\000\000\000\000\000\000\000\000\071\255\
\000\000\000\000\000\000\030\003\004\255\116\002\210\003\095\255\
\090\255\194\003\120\255\173\255\000\000\090\002\101\255\051\003\
\155\003\177\000\177\000\177\000\177\000\177\000\177\000\177\000\
\177\000\000\000\177\000\177\000\098\255\000\000\177\000\177\000\
\177\000\177\000\177\000\177\000\177\000\177\000\177\000\177\000\
\177\000\177\000\177\000\177\000\177\000\108\255\000\000\000\000\
\177\000\177\000\177\000\055\255\000\000\000\000\139\002\162\002\
\116\255\129\255\131\255\132\255\185\002\208\002\137\255\072\003\
\177\000\000\000\120\255\120\255\062\255\062\255\062\255\133\255\
\173\255\173\255\078\255\078\255\078\255\078\255\226\003\226\003\
\177\000\210\003\227\002\175\003\135\255\138\255\140\255\178\255\
\143\255\146\255\000\000\000\000\000\000\000\000\152\255\157\255\
\000\000\000\000\246\002\009\003\000\000\000\000\103\255\161\255\
\121\255\000\000\000\000\000\000\000\000\000\000\000\000\169\255\
\000\000\229\255\000\000\142\255\177\255\024\000\127\255\177\000\
\000\000\185\255\156\255\000\000\191\255\000\000\093\003\000\000\
\000\000\000\000\000\000\075\000\126\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\196\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\114\003\
\000\000\000\000\000\000\000\000\013\255\000\000\008\255\000\000\
\009\255\000\000\075\001\193\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\199\255\199\255\199\255\199\255\000\000\
\000\000\000\000\199\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\200\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\101\001\127\001\253\000\023\001\049\001\227\000\
\001\002\027\002\153\001\179\001\205\001\231\001\053\002\065\002\
\000\000\074\255\000\000\000\000\000\000\000\000\202\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\135\003\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\000\000\198\000\000\000\000\000\045\001\
\000\000\248\255\000\000\000\000\094\000\000\000"

let yytablesize = 1274
let yytable = "\038\000\
\039\000\042\000\043\000\044\000\059\000\046\000\001\000\048\000\
\049\000\064\000\063\000\064\000\063\000\003\000\035\000\078\000\
\035\000\064\000\035\000\035\000\035\000\035\000\035\000\006\000\
\045\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
\035\000\035\000\035\000\035\000\035\000\047\000\035\000\035\000\
\050\000\087\000\088\000\039\000\039\000\039\000\039\000\093\000\
\094\000\035\000\039\000\096\000\051\000\052\000\098\000\099\000\
\100\000\101\000\102\000\103\000\104\000\105\000\106\000\107\000\
\108\000\109\000\110\000\111\000\112\000\053\000\063\000\059\000\
\114\000\115\000\116\000\065\000\008\000\065\000\009\000\069\000\
\010\000\060\000\061\000\065\000\054\000\055\000\063\000\056\000\
\131\000\011\000\064\000\065\000\066\000\067\000\068\000\069\000\
\057\000\058\000\080\000\081\000\012\000\084\000\097\000\013\000\
\132\000\117\000\014\000\015\000\016\000\017\000\018\000\019\000\
\113\000\020\000\021\000\022\000\023\000\123\000\024\000\025\000\
\026\000\027\000\028\000\029\000\030\000\031\000\032\000\008\000\
\063\000\009\000\124\000\010\000\125\000\126\000\066\000\067\000\
\068\000\069\000\129\000\136\000\011\000\063\000\135\000\159\000\
\147\000\089\000\090\000\091\000\092\000\137\000\140\000\012\000\
\095\000\141\000\013\000\157\000\158\000\014\000\142\000\016\000\
\017\000\018\000\019\000\143\000\020\000\021\000\022\000\023\000\
\148\000\024\000\025\000\149\000\027\000\028\000\029\000\030\000\
\031\000\032\000\008\000\152\000\009\000\063\000\010\000\154\000\
\155\000\064\000\065\000\066\000\067\000\068\000\069\000\011\000\
\160\000\072\000\073\000\074\000\075\000\161\000\162\000\062\000\
\062\000\008\000\012\000\009\000\034\000\013\000\000\000\138\000\
\014\000\000\000\016\000\017\000\018\000\019\000\000\000\020\000\
\021\000\022\000\023\000\000\000\024\000\025\000\000\000\027\000\
\028\000\029\000\030\000\031\000\032\000\008\000\000\000\009\000\
\000\000\010\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\011\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\012\000\000\000\000\000\
\013\000\000\000\153\000\014\000\000\000\016\000\017\000\018\000\
\019\000\000\000\020\000\021\000\022\000\023\000\000\000\024\000\
\025\000\000\000\027\000\028\000\029\000\030\000\031\000\032\000\
\008\000\000\000\009\000\000\000\010\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\011\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\012\000\000\000\000\000\013\000\000\000\156\000\014\000\000\000\
\016\000\017\000\018\000\019\000\000\000\020\000\021\000\022\000\
\023\000\000\000\024\000\025\000\000\000\027\000\028\000\029\000\
\030\000\031\000\032\000\008\000\000\000\009\000\000\000\010\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\011\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\012\000\000\000\000\000\013\000\000\000\
\166\000\014\000\000\000\016\000\017\000\018\000\019\000\000\000\
\020\000\021\000\022\000\023\000\000\000\024\000\025\000\000\000\
\027\000\028\000\029\000\030\000\031\000\032\000\008\000\000\000\
\009\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\011\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\012\000\000\000\
\000\000\013\000\000\000\167\000\014\000\000\000\016\000\017\000\
\018\000\019\000\000\000\020\000\021\000\022\000\023\000\000\000\
\024\000\025\000\000\000\027\000\028\000\029\000\030\000\031\000\
\032\000\008\000\146\000\009\000\000\000\010\000\000\000\000\000\
\150\000\151\000\000\000\000\000\000\000\000\000\011\000\000\000\
\000\000\000\000\051\000\000\000\051\000\000\000\051\000\051\000\
\051\000\012\000\051\000\000\000\164\000\000\000\165\000\000\000\
\000\000\000\000\000\000\051\000\051\000\000\000\020\000\021\000\
\022\000\023\000\051\000\051\000\000\000\000\000\027\000\028\000\
\029\000\030\000\031\000\037\000\050\000\051\000\050\000\000\000\
\050\000\050\000\050\000\000\000\050\000\000\000\000\000\050\000\
\050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
\050\000\050\000\050\000\000\000\050\000\050\000\039\000\000\000\
\039\000\000\000\039\000\039\000\039\000\000\000\039\000\050\000\
\000\000\039\000\039\000\039\000\039\000\039\000\000\000\039\000\
\039\000\039\000\039\000\039\000\039\000\000\000\039\000\039\000\
\040\000\000\000\040\000\000\000\040\000\040\000\040\000\000\000\
\040\000\039\000\000\000\040\000\040\000\040\000\040\000\040\000\
\000\000\040\000\040\000\040\000\040\000\040\000\040\000\000\000\
\040\000\040\000\049\000\000\000\049\000\000\000\049\000\049\000\
\049\000\000\000\049\000\040\000\000\000\049\000\049\000\049\000\
\049\000\049\000\000\000\049\000\049\000\049\000\049\000\049\000\
\049\000\000\000\049\000\049\000\036\000\000\000\036\000\000\000\
\036\000\036\000\036\000\000\000\036\000\049\000\000\000\036\000\
\036\000\000\000\000\000\000\000\000\000\036\000\036\000\036\000\
\036\000\036\000\036\000\000\000\036\000\036\000\037\000\000\000\
\037\000\000\000\037\000\037\000\037\000\000\000\037\000\036\000\
\000\000\037\000\037\000\000\000\000\000\000\000\000\000\037\000\
\037\000\037\000\037\000\037\000\037\000\000\000\037\000\037\000\
\038\000\000\000\038\000\000\000\038\000\038\000\038\000\000\000\
\038\000\037\000\000\000\038\000\038\000\000\000\000\000\000\000\
\000\000\038\000\038\000\038\000\038\000\038\000\038\000\000\000\
\038\000\038\000\043\000\000\000\043\000\000\000\043\000\043\000\
\043\000\000\000\043\000\038\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\043\000\043\000\043\000\043\000\043\000\
\043\000\000\000\043\000\043\000\044\000\000\000\044\000\000\000\
\044\000\044\000\044\000\000\000\044\000\043\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\044\000\044\000\044\000\
\044\000\044\000\044\000\000\000\044\000\044\000\045\000\000\000\
\045\000\000\000\045\000\045\000\045\000\000\000\045\000\044\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\045\000\
\045\000\045\000\045\000\045\000\045\000\000\000\045\000\045\000\
\046\000\000\000\046\000\000\000\046\000\046\000\046\000\000\000\
\046\000\045\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\046\000\046\000\046\000\046\000\046\000\046\000\000\000\
\046\000\046\000\041\000\000\000\041\000\000\000\041\000\041\000\
\041\000\000\000\041\000\046\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\041\000\041\000\000\000\000\000\000\000\
\000\000\000\000\041\000\041\000\042\000\000\000\042\000\000\000\
\042\000\042\000\042\000\000\000\042\000\041\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\042\000\042\000\000\000\
\000\000\000\000\000\000\000\000\042\000\042\000\047\000\000\000\
\047\000\000\000\047\000\047\000\047\000\000\000\047\000\042\000\
\000\000\000\000\048\000\000\000\048\000\000\000\048\000\048\000\
\048\000\000\000\048\000\000\000\000\000\000\000\047\000\047\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\047\000\048\000\048\000\000\000\000\000\000\000\000\000\
\000\000\000\000\063\000\000\000\000\000\048\000\064\000\065\000\
\066\000\067\000\068\000\069\000\070\000\071\000\072\000\073\000\
\074\000\075\000\000\000\076\000\077\000\079\000\000\000\000\000\
\000\000\000\000\000\000\000\000\063\000\000\000\083\000\000\000\
\064\000\065\000\066\000\067\000\068\000\069\000\070\000\071\000\
\072\000\073\000\074\000\075\000\121\000\076\000\077\000\000\000\
\000\000\000\000\000\000\063\000\000\000\000\000\000\000\064\000\
\065\000\066\000\067\000\068\000\069\000\070\000\071\000\072\000\
\073\000\074\000\075\000\122\000\076\000\077\000\000\000\000\000\
\000\000\000\000\063\000\000\000\000\000\000\000\064\000\065\000\
\066\000\067\000\068\000\069\000\070\000\071\000\072\000\073\000\
\074\000\075\000\127\000\076\000\077\000\000\000\000\000\000\000\
\000\000\063\000\000\000\000\000\000\000\064\000\065\000\066\000\
\067\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\128\000\076\000\077\000\000\000\000\000\000\000\000\000\
\063\000\000\000\000\000\000\000\064\000\065\000\066\000\067\000\
\068\000\069\000\070\000\071\000\072\000\073\000\074\000\075\000\
\133\000\076\000\077\000\063\000\000\000\000\000\000\000\064\000\
\065\000\066\000\067\000\068\000\069\000\070\000\071\000\072\000\
\073\000\074\000\075\000\144\000\076\000\077\000\063\000\000\000\
\000\000\000\000\064\000\065\000\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\145\000\076\000\
\077\000\063\000\000\000\000\000\000\000\064\000\065\000\066\000\
\067\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\000\000\076\000\077\000\062\000\000\000\063\000\000\000\
\000\000\000\000\064\000\065\000\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\000\000\076\000\
\077\000\085\000\000\000\063\000\000\000\000\000\000\000\064\000\
\065\000\066\000\067\000\068\000\069\000\070\000\071\000\072\000\
\073\000\074\000\075\000\000\000\076\000\077\000\130\000\000\000\
\063\000\000\000\000\000\000\000\064\000\065\000\066\000\067\000\
\068\000\069\000\070\000\071\000\072\000\073\000\074\000\075\000\
\000\000\076\000\077\000\163\000\000\000\063\000\000\000\000\000\
\000\000\064\000\065\000\066\000\067\000\068\000\069\000\070\000\
\071\000\072\000\073\000\074\000\075\000\000\000\076\000\077\000\
\035\000\000\000\035\000\000\000\000\000\000\000\035\000\035\000\
\035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
\035\000\035\000\000\000\035\000\035\000\061\000\000\000\061\000\
\000\000\000\000\000\000\061\000\061\000\061\000\061\000\061\000\
\061\000\061\000\061\000\061\000\061\000\061\000\061\000\000\000\
\061\000\061\000\086\000\063\000\000\000\000\000\000\000\064\000\
\065\000\066\000\067\000\068\000\069\000\070\000\071\000\072\000\
\073\000\074\000\075\000\000\000\076\000\077\000\134\000\063\000\
\000\000\000\000\000\000\064\000\065\000\066\000\067\000\068\000\
\069\000\070\000\071\000\072\000\073\000\074\000\075\000\000\000\
\076\000\077\000\063\000\082\000\000\000\000\000\064\000\065\000\
\066\000\067\000\068\000\069\000\070\000\071\000\072\000\073\000\
\074\000\075\000\063\000\076\000\077\000\000\000\064\000\065\000\
\066\000\067\000\068\000\069\000\070\000\071\000\072\000\073\000\
\074\000\075\000\063\000\076\000\077\000\000\000\064\000\065\000\
\066\000\067\000\068\000\069\000\070\000\071\000\072\000\073\000\
\074\000\075\000"

let yycheck = "\008\000\
\009\000\010\000\011\000\012\000\001\001\014\000\001\000\016\000\
\017\000\002\001\002\001\004\001\004\001\052\001\002\001\012\001\
\004\001\010\001\006\001\007\001\008\001\009\001\010\001\051\001\
\007\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\051\001\026\001\027\001\
\001\001\050\000\051\000\052\000\053\000\054\000\055\000\056\000\
\057\000\037\001\059\000\060\000\001\001\001\001\063\000\064\000\
\065\000\066\000\067\000\068\000\069\000\070\000\071\000\072\000\
\073\000\074\000\075\000\076\000\077\000\001\001\009\001\001\001\
\081\000\082\000\083\000\002\001\001\001\004\001\003\001\018\001\
\005\001\011\001\012\001\010\001\001\001\001\001\009\001\001\001\
\097\000\014\001\013\001\014\001\015\001\016\001\017\001\018\001\
\001\001\000\000\004\001\010\001\025\001\001\001\005\001\028\001\
\113\000\051\001\031\001\032\001\033\001\034\001\035\001\036\001\
\005\001\038\001\039\001\040\001\041\001\002\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\001\001\
\009\001\003\001\002\001\005\001\002\001\002\001\015\001\016\001\
\017\001\018\001\002\001\002\001\014\001\009\001\008\001\152\000\
\042\001\052\000\053\000\054\000\055\000\010\001\008\001\025\001\
\059\000\008\001\028\001\029\001\030\001\031\001\007\001\033\001\
\034\001\035\001\036\001\007\001\038\001\039\001\040\001\041\001\
\008\001\043\001\044\001\051\001\046\001\047\001\048\001\049\001\
\050\001\051\001\001\001\011\001\003\001\009\001\005\001\042\001\
\008\001\013\001\014\001\015\001\016\001\017\001\018\001\014\001\
\008\001\021\001\022\001\023\001\024\001\042\001\008\001\004\001\
\002\001\002\001\025\001\002\001\007\000\028\001\255\255\030\001\
\031\001\255\255\033\001\034\001\035\001\036\001\255\255\038\001\
\039\001\040\001\041\001\255\255\043\001\044\001\255\255\046\001\
\047\001\048\001\049\001\050\001\051\001\001\001\255\255\003\001\
\255\255\005\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\014\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\025\001\255\255\255\255\
\028\001\255\255\030\001\031\001\255\255\033\001\034\001\035\001\
\036\001\255\255\038\001\039\001\040\001\041\001\255\255\043\001\
\044\001\255\255\046\001\047\001\048\001\049\001\050\001\051\001\
\001\001\255\255\003\001\255\255\005\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\014\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\025\001\255\255\255\255\028\001\255\255\030\001\031\001\255\255\
\033\001\034\001\035\001\036\001\255\255\038\001\039\001\040\001\
\041\001\255\255\043\001\044\001\255\255\046\001\047\001\048\001\
\049\001\050\001\051\001\001\001\255\255\003\001\255\255\005\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\014\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\025\001\255\255\255\255\028\001\255\255\
\030\001\031\001\255\255\033\001\034\001\035\001\036\001\255\255\
\038\001\039\001\040\001\041\001\255\255\043\001\044\001\255\255\
\046\001\047\001\048\001\049\001\050\001\051\001\001\001\255\255\
\003\001\255\255\005\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\014\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\025\001\255\255\
\255\255\028\001\255\255\030\001\031\001\255\255\033\001\034\001\
\035\001\036\001\255\255\038\001\039\001\040\001\041\001\255\255\
\043\001\044\001\255\255\046\001\047\001\048\001\049\001\050\001\
\051\001\001\001\134\000\003\001\255\255\005\001\255\255\255\255\
\140\000\141\000\255\255\255\255\255\255\255\255\014\001\255\255\
\255\255\255\255\002\001\255\255\004\001\255\255\006\001\007\001\
\008\001\025\001\010\001\255\255\160\000\255\255\162\000\255\255\
\255\255\255\255\255\255\019\001\020\001\255\255\038\001\039\001\
\040\001\041\001\026\001\027\001\255\255\255\255\046\001\047\001\
\048\001\049\001\050\001\051\001\002\001\037\001\004\001\255\255\
\006\001\007\001\008\001\255\255\010\001\255\255\255\255\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\255\255\026\001\027\001\002\001\255\255\
\004\001\255\255\006\001\007\001\008\001\255\255\010\001\037\001\
\255\255\013\001\014\001\015\001\016\001\017\001\255\255\019\001\
\020\001\021\001\022\001\023\001\024\001\255\255\026\001\027\001\
\002\001\255\255\004\001\255\255\006\001\007\001\008\001\255\255\
\010\001\037\001\255\255\013\001\014\001\015\001\016\001\017\001\
\255\255\019\001\020\001\021\001\022\001\023\001\024\001\255\255\
\026\001\027\001\002\001\255\255\004\001\255\255\006\001\007\001\
\008\001\255\255\010\001\037\001\255\255\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\020\001\021\001\022\001\023\001\
\024\001\255\255\026\001\027\001\002\001\255\255\004\001\255\255\
\006\001\007\001\008\001\255\255\010\001\037\001\255\255\013\001\
\014\001\255\255\255\255\255\255\255\255\019\001\020\001\021\001\
\022\001\023\001\024\001\255\255\026\001\027\001\002\001\255\255\
\004\001\255\255\006\001\007\001\008\001\255\255\010\001\037\001\
\255\255\013\001\014\001\255\255\255\255\255\255\255\255\019\001\
\020\001\021\001\022\001\023\001\024\001\255\255\026\001\027\001\
\002\001\255\255\004\001\255\255\006\001\007\001\008\001\255\255\
\010\001\037\001\255\255\013\001\014\001\255\255\255\255\255\255\
\255\255\019\001\020\001\021\001\022\001\023\001\024\001\255\255\
\026\001\027\001\002\001\255\255\004\001\255\255\006\001\007\001\
\008\001\255\255\010\001\037\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\019\001\020\001\021\001\022\001\023\001\
\024\001\255\255\026\001\027\001\002\001\255\255\004\001\255\255\
\006\001\007\001\008\001\255\255\010\001\037\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\019\001\020\001\021\001\
\022\001\023\001\024\001\255\255\026\001\027\001\002\001\255\255\
\004\001\255\255\006\001\007\001\008\001\255\255\010\001\037\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\019\001\
\020\001\021\001\022\001\023\001\024\001\255\255\026\001\027\001\
\002\001\255\255\004\001\255\255\006\001\007\001\008\001\255\255\
\010\001\037\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\019\001\020\001\021\001\022\001\023\001\024\001\255\255\
\026\001\027\001\002\001\255\255\004\001\255\255\006\001\007\001\
\008\001\255\255\010\001\037\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\019\001\020\001\255\255\255\255\255\255\
\255\255\255\255\026\001\027\001\002\001\255\255\004\001\255\255\
\006\001\007\001\008\001\255\255\010\001\037\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\019\001\020\001\255\255\
\255\255\255\255\255\255\255\255\026\001\027\001\002\001\255\255\
\004\001\255\255\006\001\007\001\008\001\255\255\010\001\037\001\
\255\255\255\255\002\001\255\255\004\001\255\255\006\001\007\001\
\008\001\255\255\010\001\255\255\255\255\255\255\026\001\027\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\037\001\026\001\027\001\255\255\255\255\255\255\255\255\
\255\255\255\255\009\001\255\255\255\255\037\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\255\255\026\001\027\001\002\001\255\255\255\255\
\255\255\255\255\255\255\255\255\009\001\255\255\037\001\255\255\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\002\001\026\001\027\001\255\255\
\255\255\255\255\255\255\009\001\255\255\255\255\255\255\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\002\001\026\001\027\001\255\255\255\255\
\255\255\255\255\009\001\255\255\255\255\255\255\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\002\001\026\001\027\001\255\255\255\255\255\255\
\255\255\009\001\255\255\255\255\255\255\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\002\001\026\001\027\001\255\255\255\255\255\255\255\255\
\009\001\255\255\255\255\255\255\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\006\001\026\001\027\001\009\001\255\255\255\255\255\255\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\006\001\026\001\027\001\009\001\255\255\
\255\255\255\255\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\006\001\026\001\
\027\001\009\001\255\255\255\255\255\255\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\255\255\026\001\027\001\007\001\255\255\009\001\255\255\
\255\255\255\255\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\255\255\026\001\
\027\001\007\001\255\255\009\001\255\255\255\255\255\255\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\255\255\026\001\027\001\007\001\255\255\
\009\001\255\255\255\255\255\255\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\255\255\026\001\027\001\007\001\255\255\009\001\255\255\255\255\
\255\255\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\255\255\026\001\027\001\
\007\001\255\255\009\001\255\255\255\255\255\255\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\255\255\026\001\027\001\007\001\255\255\009\001\
\255\255\255\255\255\255\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\255\255\
\026\001\027\001\008\001\009\001\255\255\255\255\255\255\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\255\255\026\001\027\001\008\001\009\001\
\255\255\255\255\255\255\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\255\255\
\026\001\027\001\009\001\010\001\255\255\255\255\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\009\001\026\001\027\001\255\255\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\009\001\026\001\027\001\255\255\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001"

let yynames_const = "\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LSQUAR\000\
  RSQUAR\000\
  SEMI\000\
  COLON\000\
  GET\000\
  COMMA\000\
  ASSIGN\000\
  DOLL\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  PERCENT\000\
  EXP\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  NOT\000\
  AND\000\
  OR\000\
  BREAK\000\
  ELSE\000\
  END\000\
  FOR\000\
  FUNCTION\000\
  RETURN\000\
  RUN\000\
  WHILE\000\
  IF\000\
  IN\000\
  LINE\000\
  CIRCLE\000\
  RUNSET\000\
  POLYGON\000\
  PRINT\000\
  PRINTT\000\
  ENDOFPROGRAM\000\
  EOF\000\
  "

let yynames_block = "\
  TYPE\000\
  INTEGERLIT\000\
  FLOATLIT\000\
  CHARLIT\000\
  BOOLLIT\000\
  STRINGLIT\000\
  ID\000\
  PRESET\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'preset) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'bodies) in
    Obj.repr(
# 34 "parser.mly"
                                ( _2 )
# 612 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 37 "parser.mly"
           ( Preset(_1, _2) )
# 620 "parser.ml"
               : 'preset))
; (fun __caml_parser_env ->
    Obj.repr(
# 40 "parser.mly"
                  ( [], [] )
# 626 "parser.ml"
               : 'bodies))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'bodies) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl) in
    Obj.repr(
# 41 "parser.mly"
                ( (_2 :: fst _1), snd _1 )
# 634 "parser.ml"
               : 'bodies))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'bodies) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 42 "parser.mly"
                ( fst _1, (_2 :: snd _1) )
# 642 "parser.ml"
               : 'bodies))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 45 "parser.mly"
       ( _1 )
# 649 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : 'paras_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 49 "parser.mly"
 ({
    tp = _7;
		fname = _2;
		paras = _4;
		body = List.rev _9
    
	})
# 665 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 58 "parser.mly"
                    ( [] )
# 671 "parser.ml"
               : 'paras_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'paras_list) in
    Obj.repr(
# 59 "parser.mly"
                  ( List.rev _1 )
# 678 "parser.ml"
               : 'paras_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 62 "parser.mly"
                                   ( [(_1, _3)] )
# 686 "parser.ml"
               : 'paras_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'paras_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 63 "parser.mly"
                                    ( (_3, _5) :: _1 )
# 695 "parser.ml"
               : 'paras_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 66 "parser.mly"
                     ( [] )
# 701 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 67 "parser.mly"
                    ( _2 :: _1 )
# 709 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 70 "parser.mly"
                ( Expr(_1) )
# 716 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 71 "parser.mly"
                       ( Return(_2) )
# 723 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 73 "parser.mly"
      ( If(_3, _6, []) )
# 731 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 7 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : 'stmt_list) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 75 "parser.mly"
      ( If(_3, _6, _9) )
# 740 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 76 "parser.mly"
                                                   ( While(_3, _6) )
# 748 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 77 "parser.mly"
                                    ( Print(_3) )
# 755 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 78 "parser.mly"
                                     ( PrintT(_3) )
# 762 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 79 "parser.mly"
                                           ( For(_2, _4, _6) )
# 771 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 80 "parser.mly"
                                   ( Run(_2, _4) )
# 779 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 81 "parser.mly"
                           ( Assign(_1, _3, Noexpr) )
# 787 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 82 "parser.mly"
                                                  ( Assign(_1, _7, _4) )
# 796 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 83 "parser.mly"
                ( Break )
# 802 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 86 "parser.mly"
                  ( Noexpr )
# 808 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 87 "parser.mly"
           ( _1 )
# 815 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 90 "parser.mly"
                       ( Int(_1) )
# 822 "parser.ml"
               : 'digit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 91 "parser.mly"
                       ( Float(_1) )
# 829 "parser.ml"
               : 'digit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 94 "parser.mly"
                       ( Int(_1) )
# 836 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 95 "parser.mly"
                      ( Float(_1) )
# 843 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 96 "parser.mly"
                      ( Char(_1) )
# 850 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 97 "parser.mly"
                      ( Bool(_1) )
# 857 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 98 "parser.mly"
                      ( String(_1) )
# 864 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 99 "parser.mly"
                      ( Id(_1) )
# 871 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 100 "parser.mly"
                       ( Minus(_2))
# 878 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 101 "parser.mly"
                      ( Binop(_1, Add,   _3) )
# 886 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 102 "parser.mly"
                      ( Binop(_1, Sub,   _3) )
# 894 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 103 "parser.mly"
                      ( Binop(_1, Mult,  _3) )
# 902 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 104 "parser.mly"
                      ( Binop(_1, Div,   _3) )
# 910 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 105 "parser.mly"
                      ( Binop(_1, Equal, _3) )
# 918 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 106 "parser.mly"
                      ( Binop(_1, Neq,   _3) )
# 926 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 107 "parser.mly"
                      ( Binop(_1, Less,  _3) )
# 934 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 108 "parser.mly"
                      ( Binop(_1, Leq,   _3) )
# 942 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 109 "parser.mly"
                      ( Binop(_1, Greater,  _3) )
# 950 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 110 "parser.mly"
                      ( Binop(_1, Geq,   _3) )
# 958 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 111 "parser.mly"
                       ( Binop(_1, And,   _3) )
# 966 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "parser.mly"
                       ( Binop(_1, Or,   _3) )
# 974 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "parser.mly"
                        ( Binop(_1, Mod,   _3))
# 982 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
                       ( Binop(_1, Exp,   _3) )
# 990 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 115 "parser.mly"
                       ( Not(_2) )
# 997 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 116 "parser.mly"
                                  ( Call(_1, _3) )
# 1005 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 117 "parser.mly"
                        ( _2 )
# 1012 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                                    ( Dot(_2, _4) )
# 1020 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 119 "parser.mly"
                    ( Get_Call(_1, _3) )
# 1028 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 120 "parser.mly"
                                     ( Line(_3) )
# 1035 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 121 "parser.mly"
                                        ( Polygon(_3) )
# 1042 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 122 "parser.mly"
                                       ( Circle(_3) )
# 1049 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 123 "parser.mly"
                                       ( Runset(_3) )
# 1056 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 124 "parser.mly"
                                ( List(_2) )
# 1063 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 125 "parser.mly"
                                 ( ListEle(_1, _4) )
# 1071 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 130 "parser.mly"
                  ( [] )
# 1077 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 131 "parser.mly"
                   ( List.rev _1 )
# 1084 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 134 "parser.mly"
                            ( [_1] )
# 1091 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 135 "parser.mly"
                             ( _3 :: _1 )
# 1099 "parser.ml"
               : 'actuals_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
