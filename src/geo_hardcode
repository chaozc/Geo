env := {vars = StringMap.empty; funcs = StringMap.add "len" "int" env.contents.funcs; get_call = ""; func_opt = StringMap.add "len" ["list"] env.contents.func_opt};;
env := {vars = StringMap.empty; funcs = StringMap.add "list:append" "void" env.contents.funcs; get_call = ""; func_opt = StringMap.add "list:append" ["any"] env.contents.func_opt};;
env := {vars = StringMap.empty; funcs = StringMap.add "list:pop" "list_ele" env.contents.funcs; get_call = ""; func_opt = StringMap.add "list:pop" [] env.contents.func_opt};;
env := {vars = StringMap.empty; funcs = StringMap.add "sin" "float" env.contents.funcs; get_call = ""; func_opt = StringMap.add "sin" ["float"] env.contents.func_opt};;
env := {vars = StringMap.empty; funcs = StringMap.add "cos" "float" env.contents.funcs; get_call = ""; func_opt = StringMap.add "cos" ["float"] env.contents.func_opt};;
env := {vars = StringMap.empty; funcs = StringMap.add "tan" "float" env.contents.funcs; get_call = ""; func_opt = StringMap.add "tan" ["float"] env.contents.func_opt};;
env := {vars = StringMap.empty; funcs = StringMap.add "cot" "float" env.contents.funcs; get_call = ""; func_opt = StringMap.add "cot" ["float"] env.contents.func_opt};;
env := {vars = StringMap.empty; funcs = StringMap.add "dot:getX" "float" env.contents.funcs; get_call = ""; func_opt = StringMap.add "dot:getX" [] env.contents.func_opt};;
env := {vars = StringMap.empty; funcs = StringMap.add "dot:getY" "float" env.contents.funcs; get_call = ""; func_opt = StringMap.add "dot:getY" [] env.contents.func_opt};;
env := {vars = StringMap.empty; funcs = StringMap.add "dot:distance" "float" env.contents.funcs; get_call = ""; func_opt = StringMap.add "dot:distance" ["dot"] env.contents.func_opt};;
env := {vars = StringMap.empty; funcs = StringMap.add "line:getPara" "float" env.contents.funcs; get_call = ""; func_opt = StringMap.add "line:getPara" ["char"] env.contents.func_opt};;
env := {vars = StringMap.empty; funcs = StringMap.add "line:setPara" "void" env.contents.funcs; get_call = ""; func_opt = StringMap.add "line:setPara" ["char";"float"] env.contents.func_opt};;
env := {vars = StringMap.empty; funcs = StringMap.add "line:getRunstep" "float" env.contents.funcs; get_call = ""; func_opt = StringMap.add "line:getRunstep" ["char"] env.contents.func_opt};;
env := {vars = StringMap.empty; funcs = StringMap.add "line:setRunstep" "void" env.contents.funcs; get_call = ""; func_opt = StringMap.add "line:setRunstep" ["char";"float"] env.contents.func_opt};;
env := {vars = StringMap.empty; funcs = StringMap.add "line:getY" "float" env.contents.funcs; get_call = ""; func_opt = StringMap.add "line:getY" ["float"] env.contents.func_opt};;
env := {vars = StringMap.empty; funcs = StringMap.add "line:getX" "float" env.contents.funcs; get_call = ""; func_opt = StringMap.add "line:getX" ["float"] env.contents.func_opt};;
env := {vars = StringMap.empty; funcs = StringMap.add "line:contains" "bool" env.contents.funcs; get_call = ""; func_opt = StringMap.add "line:contains" ["dot"] env.contents.func_opt};;
env := {vars = StringMap.empty; funcs = StringMap.add "line:getMidpoint" "dot" env.contents.funcs; get_call = ""; func_opt = StringMap.add "line:getMidpoint" [] env.contents.func_opt};;
env := {vars = StringMap.empty; funcs = StringMap.add "line:length" "float" env.contents.funcs; get_call = ""; func_opt = StringMap.add "line:length" [] env.contents.func_opt};;
env := {vars = StringMap.empty; funcs = StringMap.add "line:pointAway" "dot" env.contents.funcs; get_call = ""; func_opt = StringMap.add "line:pointAway" ["dot";"float"] env.contents.func_opt};;
env := {vars = StringMap.empty; funcs = StringMap.add "line:isParallel" "bool" env.contents.funcs; get_call = ""; func_opt = StringMap.add "line:isParallel" ["line"] env.contents.func_opt};;
env := {vars = StringMap.empty; funcs = StringMap.add "line:intersect" "list" env.contents.funcs; get_call = ""; func_opt = StringMap.add "line:intersect" ["shape"] env.contents.func_opt};;
env := {vars = StringMap.empty; funcs = StringMap.add "circle:getCenter" "dot" env.contents.funcs; get_call = ""; func_opt = StringMap.add "circle:getCenter" [] env.contents.func_opt};;
env := {vars = StringMap.empty; funcs = StringMap.add "circle:getRadius" "float" env.contents.funcs; get_call = ""; func_opt = StringMap.add "circle:getRadius" [] env.contents.func_opt};;
env := {vars = StringMap.empty; funcs = StringMap.add "circle:setCenter" "void" env.contents.funcs; get_call = ""; func_opt = StringMap.add "circle:setCenter" ["dot"] env.contents.func_opt};;
env := {vars = StringMap.empty; funcs = StringMap.add "circle:setRadius" "void" env.contents.funcs; get_call = ""; func_opt = StringMap.add "circle:setRadius" ["float"] env.contents.func_opt};;
env := {vars = StringMap.empty; funcs = StringMap.add "circle:getRunstep" "float" env.contents.funcs; get_call = ""; func_opt = StringMap.add "circle:getRunstep" ["char"] env.contents.func_opt};;
env := {vars = StringMap.empty; funcs = StringMap.add "circle:setRunstep" "void" env.contents.funcs; get_call = ""; func_opt = StringMap.add "circle:setRunstep" ["char";"float"] env.contents.func_opt};;
env := {vars = StringMap.empty; funcs = StringMap.add "circle:getPointbyarc" "dot" env.contents.funcs; get_call = ""; func_opt = StringMap.add "circle:getPointbyarc" ["float"] env.contents.func_opt};;
env := {vars = StringMap.empty; funcs = StringMap.add "circle:intersect" "list" env.contents.funcs; get_call = ""; func_opt = StringMap.add "circle:intersect" ["shape"] env.contents.func_opt};;
env := {vars = StringMap.empty; funcs = StringMap.add "runset:addPara" "bool" env.contents.funcs; get_call = ""; func_opt = StringMap.add "runset:addPara" ["shape";"char"] env.contents.func_opt};;
env := {vars = StringMap.empty; funcs = StringMap.add "runset:renew" "void" env.contents.funcs; get_call = ""; func_opt = StringMap.add "runset:renew" [] env.contents.func_opt};;
env := {vars = StringMap.empty; funcs = StringMap.add "runset:enableRun" "void" env.contents.funcs; get_call = ""; func_opt = StringMap.add "runset:enableRun" [] env.contents.func_opt};;
env := {vars = StringMap.empty; funcs = StringMap.add "runset:disableRun" "void" env.contents.funcs; get_call = ""; func_opt = StringMap.add "runset:disableRun" [] env.contents.func_opt};;
env := {vars = StringMap.empty; funcs = StringMap.add "runset:removePara" "bool" env.contents.funcs; get_call = ""; func_opt = StringMap.add "runset:removePara" ["shape";"char"] env.contents.func_opt};;
env := {vars = StringMap.empty; funcs = StringMap.add "line:rotateonPoint" "void" env.contents.funcs; get_call = ""; func_opt = StringMap.add "line:rotateonPoint" ["dot";"float"] env.contents.func_opt};;
env := {vars = StringMap.empty; funcs = StringMap.add "polygon:setRunstep" "void" env.contents.funcs; get_call = ""; func_opt = StringMap.add "polygon:setRunstep" ["char";"float"] env.contents.func_opt};;
env := {vars = StringMap.empty; funcs = StringMap.add "polygon:getRunstep" "float" env.contents.funcs; get_call = ""; func_opt = StringMap.add "polygon:getRunstep" ["char"] env.contents.func_opt};;
env := {vars = StringMap.empty; funcs = StringMap.add "polygon:getPoints" "list" env.contents.funcs; get_call = ""; func_opt = StringMap.add "polygon:getPoints" [] env.contents.func_opt};;
env := {vars = StringMap.empty; funcs = StringMap.add "polygon:getArea" "float" env.contents.funcs; get_call = ""; func_opt = StringMap.add "polygon:getArea" [] env.contents.func_opt};;
env := {vars = StringMap.empty; funcs = StringMap.add "polygon:getAngle" "list" env.contents.funcs; get_call = ""; func_opt = StringMap.add "polygon:getAngle" [] env.contents.func_opt};;
env := {vars = StringMap.empty; funcs = StringMap.add "polygon:getParimeter" "float" env.contents.funcs; get_call = ""; func_opt = StringMap.add "polygon:getParimeter" [] env.contents.func_opt};;
env := {vars = StringMap.empty; funcs = StringMap.add "polygon:getCentroid" "dot" env.contents.funcs; get_call = ""; func_opt = StringMap.add "polygon:getCentroid" [] env.contents.func_opt};;
env := {vars = StringMap.empty; funcs = StringMap.add "polygon:getSides" "list" env.contents.funcs; get_call = ""; func_opt = StringMap.add "polygon:getSides" [] env.contents.func_opt};;
env := {vars = StringMap.empty; funcs = StringMap.add "polygon:intersect" "list" env.contents.funcs; get_call = ""; func_opt = StringMap.add "polygon:intersect" ["shape"] env.contents.func_opt};;
env := {vars = StringMap.empty; funcs = StringMap.add "runset:mark" "void" env.contents.funcs; get_call = ""; func_opt = StringMap.add "runset:mark" ["dot"] env.contents.func_opt};;
