type token =
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LSQUAR
  | RSQUAR
  | SEMI
  | COLON
  | GET
  | COMMA
  | ASSIGN
  | AT
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | PERCENT
  | EXP
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | NOT
  | AND
  | OR
  | BREAK
  | CONST
  | ELSE
  | END
  | FOR
  | FUNCTION
  | IMPORT
  | LIST
  | MODEL
  | RETURN
  | RUN
  | SUBMODEL
  | WHILE
  | IF
  | IN
  | LINE
  | CIRCLE
  | TYPE of (string)
  | PRINT
  | PRINTT
  | ENDOFPROGRAM
  | EOF
  | INTEGERLIT of (int)
  | FLOATLIT of (float)
  | CHARLIT of (char)
  | BOOLLIT of (bool)
  | STRINGLIT of (string)
  | ID of (string)
  | PRESET of (string)

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 open Ast 
# 64 "parser.ml"
let yytransl_const = [|
  257 (* LPAREN *);
  258 (* RPAREN *);
  259 (* LBRACE *);
  260 (* RBRACE *);
  261 (* LSQUAR *);
  262 (* RSQUAR *);
  263 (* SEMI *);
  264 (* COLON *);
  265 (* GET *);
  266 (* COMMA *);
  267 (* ASSIGN *);
  268 (* AT *);
  269 (* PLUS *);
  270 (* MINUS *);
  271 (* TIMES *);
  272 (* DIVIDE *);
  273 (* PERCENT *);
  274 (* EXP *);
  275 (* EQ *);
  276 (* NEQ *);
  277 (* LT *);
  278 (* LEQ *);
  279 (* GT *);
  280 (* GEQ *);
  281 (* NOT *);
  282 (* AND *);
  283 (* OR *);
  284 (* BREAK *);
  285 (* CONST *);
  286 (* ELSE *);
  287 (* END *);
  288 (* FOR *);
  289 (* FUNCTION *);
  290 (* IMPORT *);
  291 (* LIST *);
  292 (* MODEL *);
  293 (* RETURN *);
  294 (* RUN *);
  295 (* SUBMODEL *);
  296 (* WHILE *);
  297 (* IF *);
  298 (* IN *);
  299 (* LINE *);
  300 (* CIRCLE *);
  302 (* PRINT *);
  303 (* PRINTT *);
  304 (* ENDOFPROGRAM *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  301 (* TYPE *);
  305 (* INTEGERLIT *);
  306 (* FLOATLIT *);
  307 (* CHARLIT *);
  308 (* BOOLLIT *);
  309 (* STRINGLIT *);
  310 (* ID *);
  311 (* PRESET *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\003\000\003\000\003\000\004\000\006\000\007\000\
\007\000\009\000\009\000\008\000\008\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\011\000\011\000\012\000\
\012\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\013\000\013\000\014\000\014\000\000\000"

let yylen = "\002\000\
\004\000\002\000\000\000\002\000\002\000\001\000\010\000\000\000\
\001\000\003\000\005\000\000\000\002\000\002\000\003\000\007\000\
\010\000\007\000\005\000\005\000\007\000\000\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\002\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\002\000\003\000\
\004\000\003\000\005\000\003\000\004\000\004\000\003\000\004\000\
\000\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\061\000\003\000\002\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\026\000\027\000\
\028\000\029\000\030\000\000\000\004\000\005\000\006\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\001\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\050\000\055\000\000\000\000\000\
\000\000\000\000\015\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\053\000\054\000\000\000\000\000\049\000\
\056\000\051\000\012\000\000\000\000\000\000\000\012\000\012\000\
\019\000\020\000\000\000\010\000\000\000\000\000\000\000\000\000\
\021\000\013\000\000\000\000\000\018\000\000\000\016\000\012\000\
\011\000\012\000\000\000\000\000\007\000\017\000"

let yydgoto = "\002\000\
\004\000\005\000\007\000\029\000\130\000\031\000\104\000\123\000\
\105\000\032\000\000\000\000\000\035\000\036\000"

let yysindex = "\007\000\
\211\254\000\000\216\254\000\000\000\000\000\000\065\255\093\000\
\093\000\093\000\093\000\093\000\093\000\222\254\093\000\031\255\
\033\255\040\255\044\255\061\255\066\255\072\000\000\000\000\000\
\000\000\000\000\000\000\005\255\000\000\000\000\000\000\230\002\
\104\002\109\003\070\255\068\255\252\002\077\255\179\255\074\002\
\075\255\018\003\093\000\093\000\093\000\093\000\093\000\093\000\
\000\000\093\000\093\000\093\000\000\000\093\000\093\000\093\000\
\093\000\093\000\093\000\093\000\093\000\093\000\093\000\093\000\
\093\000\093\000\093\000\093\000\000\000\000\000\093\000\093\000\
\093\000\028\255\000\000\130\002\156\002\082\255\094\255\182\002\
\208\002\097\255\109\003\043\003\100\255\077\255\077\255\006\255\
\006\255\006\255\010\255\131\003\131\003\230\255\230\255\230\255\
\230\255\179\255\179\255\109\003\065\003\087\003\096\255\105\255\
\111\255\102\255\117\255\000\000\000\000\120\255\121\255\000\000\
\000\000\000\000\000\000\084\255\118\255\076\255\000\000\000\000\
\000\000\000\000\173\255\000\000\086\255\124\255\227\255\119\255\
\000\000\000\000\126\255\091\255\000\000\130\255\000\000\000\000\
\000\000\000\000\025\000\079\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\138\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\146\000\000\000\000\000\000\000\000\000\
\000\000\067\255\000\000\029\255\000\000\066\001\248\001\000\000\
\000\000\000\000\000\000\000\000\143\255\143\255\000\000\000\000\
\000\000\143\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\144\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\019\255\000\000\176\000\092\001\118\001\236\000\
\010\001\040\001\206\000\081\255\133\255\144\001\170\001\196\001\
\222\001\018\002\044\002\071\255\000\000\000\000\000\000\000\000\
\145\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\000\000\141\000\000\000\000\000\148\255\
\000\000\248\255\000\000\000\000\228\255\000\000"

let yytablesize = 1182
let yytable = "\033\000\
\034\000\037\000\038\000\039\000\040\000\050\000\042\000\001\000\
\052\000\003\000\127\000\128\000\052\000\006\000\054\000\051\000\
\078\000\079\000\054\000\041\000\048\000\082\000\048\000\060\000\
\048\000\048\000\048\000\139\000\048\000\140\000\058\000\043\000\
\058\000\044\000\076\000\077\000\034\000\034\000\080\000\081\000\
\045\000\034\000\083\000\084\000\046\000\085\000\086\000\087\000\
\088\000\089\000\090\000\091\000\092\000\093\000\094\000\095\000\
\096\000\097\000\098\000\099\000\048\000\047\000\100\000\101\000\
\102\000\008\000\048\000\009\000\059\000\010\000\059\000\049\000\
\060\000\070\000\060\000\074\000\059\000\071\000\011\000\052\000\
\060\000\103\000\037\000\108\000\037\000\054\000\037\000\037\000\
\037\000\012\000\037\000\057\000\058\000\059\000\060\000\109\000\
\013\000\014\000\112\000\037\000\037\000\015\000\052\000\116\000\
\016\000\017\000\117\000\018\000\019\000\119\000\020\000\021\000\
\022\000\023\000\024\000\025\000\026\000\027\000\028\000\008\000\
\118\000\009\000\037\000\010\000\120\000\125\000\121\000\122\000\
\124\000\126\000\131\000\132\000\011\000\136\000\038\000\137\000\
\038\000\138\000\038\000\038\000\038\000\057\000\038\000\012\000\
\057\000\008\000\009\000\030\000\134\000\135\000\013\000\038\000\
\038\000\000\000\000\000\015\000\000\000\000\000\016\000\017\000\
\000\000\018\000\019\000\000\000\020\000\021\000\000\000\023\000\
\024\000\025\000\026\000\027\000\028\000\008\000\038\000\009\000\
\000\000\010\000\000\000\000\000\000\000\052\000\000\000\000\000\
\000\000\000\000\011\000\054\000\000\000\000\000\000\000\055\000\
\056\000\057\000\058\000\059\000\060\000\012\000\000\000\063\000\
\064\000\065\000\066\000\129\000\013\000\000\000\000\000\000\000\
\000\000\015\000\000\000\000\000\016\000\017\000\000\000\018\000\
\019\000\000\000\020\000\021\000\000\000\023\000\024\000\025\000\
\026\000\027\000\028\000\008\000\000\000\009\000\000\000\010\000\
\052\000\000\000\000\000\000\000\000\000\000\000\054\000\000\000\
\011\000\000\000\055\000\056\000\057\000\058\000\059\000\060\000\
\000\000\000\000\000\000\012\000\000\000\000\000\000\000\000\000\
\000\000\133\000\013\000\000\000\000\000\000\000\000\000\015\000\
\000\000\000\000\016\000\017\000\000\000\018\000\019\000\000\000\
\020\000\021\000\000\000\023\000\024\000\025\000\026\000\027\000\
\028\000\008\000\000\000\009\000\000\000\010\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\011\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\012\000\000\000\000\000\000\000\000\000\000\000\141\000\
\013\000\000\000\000\000\000\000\000\000\015\000\000\000\000\000\
\016\000\017\000\000\000\018\000\019\000\000\000\020\000\021\000\
\000\000\023\000\024\000\025\000\026\000\027\000\028\000\008\000\
\000\000\009\000\000\000\010\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\011\000\008\000\000\000\009\000\
\000\000\010\000\000\000\000\000\000\000\000\000\000\000\012\000\
\000\000\000\000\011\000\000\000\000\000\142\000\013\000\000\000\
\000\000\000\000\000\000\015\000\000\000\012\000\016\000\017\000\
\000\000\018\000\019\000\000\000\020\000\021\000\000\000\023\000\
\024\000\025\000\026\000\027\000\028\000\000\000\000\000\018\000\
\019\000\000\000\000\000\000\000\000\000\023\000\024\000\025\000\
\026\000\027\000\028\000\031\000\031\000\031\000\000\000\031\000\
\031\000\031\000\031\000\031\000\000\000\000\000\031\000\031\000\
\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
\031\000\031\000\000\000\031\000\031\000\000\000\000\000\000\000\
\000\000\052\000\000\000\052\000\000\000\052\000\052\000\052\000\
\052\000\052\000\000\000\031\000\052\000\052\000\052\000\052\000\
\052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
\000\000\052\000\052\000\000\000\000\000\000\000\000\000\046\000\
\000\000\046\000\000\000\046\000\046\000\046\000\000\000\046\000\
\000\000\052\000\046\000\046\000\046\000\046\000\046\000\046\000\
\046\000\046\000\046\000\046\000\046\000\046\000\000\000\046\000\
\046\000\000\000\000\000\000\000\000\000\035\000\000\000\035\000\
\000\000\035\000\035\000\035\000\000\000\035\000\000\000\046\000\
\035\000\035\000\035\000\035\000\035\000\000\000\035\000\035\000\
\035\000\035\000\035\000\035\000\000\000\035\000\035\000\000\000\
\000\000\000\000\000\000\036\000\000\000\036\000\000\000\036\000\
\036\000\036\000\000\000\036\000\000\000\035\000\036\000\036\000\
\036\000\036\000\036\000\000\000\036\000\036\000\036\000\036\000\
\036\000\036\000\000\000\036\000\036\000\000\000\000\000\000\000\
\000\000\045\000\000\000\045\000\000\000\045\000\045\000\045\000\
\000\000\045\000\000\000\036\000\045\000\045\000\045\000\045\000\
\045\000\000\000\045\000\045\000\045\000\045\000\045\000\045\000\
\000\000\045\000\045\000\032\000\000\000\032\000\000\000\032\000\
\032\000\032\000\000\000\032\000\000\000\000\000\032\000\032\000\
\000\000\045\000\000\000\000\000\032\000\032\000\032\000\032\000\
\032\000\032\000\000\000\032\000\032\000\033\000\000\000\033\000\
\000\000\033\000\033\000\033\000\000\000\033\000\000\000\000\000\
\033\000\033\000\000\000\032\000\000\000\000\000\033\000\033\000\
\033\000\033\000\033\000\033\000\000\000\033\000\033\000\034\000\
\000\000\034\000\000\000\034\000\034\000\034\000\000\000\034\000\
\000\000\000\000\034\000\034\000\000\000\033\000\000\000\000\000\
\034\000\034\000\034\000\034\000\034\000\034\000\000\000\034\000\
\034\000\039\000\000\000\039\000\000\000\039\000\039\000\039\000\
\000\000\039\000\000\000\000\000\000\000\000\000\000\000\034\000\
\000\000\000\000\039\000\039\000\039\000\039\000\039\000\039\000\
\000\000\039\000\039\000\040\000\000\000\040\000\000\000\040\000\
\040\000\040\000\000\000\040\000\000\000\000\000\000\000\000\000\
\000\000\039\000\000\000\000\000\040\000\040\000\040\000\040\000\
\040\000\040\000\000\000\040\000\040\000\041\000\000\000\041\000\
\000\000\041\000\041\000\041\000\000\000\041\000\000\000\000\000\
\000\000\000\000\000\000\040\000\000\000\000\000\041\000\041\000\
\041\000\041\000\041\000\041\000\000\000\041\000\041\000\042\000\
\000\000\042\000\000\000\042\000\042\000\042\000\000\000\042\000\
\000\000\000\000\000\000\000\000\000\000\041\000\000\000\000\000\
\042\000\042\000\042\000\042\000\042\000\042\000\000\000\042\000\
\042\000\047\000\000\000\047\000\000\000\047\000\047\000\047\000\
\000\000\047\000\000\000\000\000\000\000\000\000\000\000\042\000\
\000\000\000\000\047\000\047\000\000\000\000\000\000\000\000\000\
\000\000\047\000\047\000\043\000\000\000\043\000\000\000\043\000\
\043\000\043\000\000\000\043\000\000\000\000\000\000\000\000\000\
\000\000\047\000\000\000\000\000\043\000\043\000\000\000\000\000\
\000\000\000\000\000\000\043\000\043\000\044\000\000\000\044\000\
\000\000\044\000\044\000\044\000\000\000\044\000\000\000\000\000\
\000\000\000\000\000\000\043\000\000\000\000\000\044\000\044\000\
\000\000\000\000\000\000\000\000\000\000\044\000\044\000\000\000\
\000\000\000\000\000\000\000\000\052\000\000\000\000\000\000\000\
\000\000\000\000\054\000\000\000\000\000\044\000\055\000\056\000\
\057\000\058\000\059\000\060\000\061\000\062\000\063\000\064\000\
\065\000\066\000\000\000\067\000\068\000\000\000\000\000\000\000\
\000\000\069\000\052\000\000\000\000\000\000\000\000\000\000\000\
\054\000\000\000\000\000\073\000\055\000\056\000\057\000\058\000\
\059\000\060\000\061\000\062\000\063\000\064\000\065\000\066\000\
\000\000\067\000\068\000\106\000\052\000\000\000\000\000\000\000\
\000\000\000\000\054\000\000\000\000\000\000\000\055\000\056\000\
\057\000\058\000\059\000\060\000\061\000\062\000\063\000\064\000\
\065\000\066\000\000\000\067\000\068\000\107\000\052\000\000\000\
\000\000\000\000\000\000\000\000\054\000\000\000\000\000\000\000\
\055\000\056\000\057\000\058\000\059\000\060\000\061\000\062\000\
\063\000\064\000\065\000\066\000\000\000\067\000\068\000\110\000\
\052\000\000\000\000\000\000\000\000\000\000\000\054\000\000\000\
\000\000\000\000\055\000\056\000\057\000\058\000\059\000\060\000\
\061\000\062\000\063\000\064\000\065\000\066\000\000\000\067\000\
\068\000\111\000\052\000\000\000\000\000\000\000\000\000\000\000\
\054\000\000\000\000\000\000\000\055\000\056\000\057\000\058\000\
\059\000\060\000\061\000\062\000\063\000\064\000\065\000\066\000\
\052\000\067\000\068\000\000\000\053\000\000\000\054\000\000\000\
\000\000\000\000\055\000\056\000\057\000\058\000\059\000\060\000\
\061\000\062\000\063\000\064\000\065\000\066\000\052\000\067\000\
\068\000\000\000\000\000\000\000\054\000\072\000\000\000\000\000\
\055\000\056\000\057\000\058\000\059\000\060\000\061\000\062\000\
\063\000\064\000\065\000\066\000\052\000\067\000\068\000\000\000\
\075\000\000\000\054\000\000\000\000\000\000\000\055\000\056\000\
\057\000\058\000\059\000\060\000\061\000\062\000\063\000\064\000\
\065\000\066\000\000\000\067\000\068\000\052\000\113\000\000\000\
\000\000\000\000\000\000\054\000\000\000\000\000\000\000\055\000\
\056\000\057\000\058\000\059\000\060\000\061\000\062\000\063\000\
\064\000\065\000\066\000\052\000\067\000\068\000\114\000\000\000\
\000\000\054\000\000\000\000\000\000\000\055\000\056\000\057\000\
\058\000\059\000\060\000\061\000\062\000\063\000\064\000\065\000\
\066\000\052\000\067\000\068\000\000\000\000\000\115\000\054\000\
\000\000\000\000\000\000\055\000\056\000\057\000\058\000\059\000\
\060\000\061\000\062\000\063\000\064\000\065\000\066\000\052\000\
\067\000\068\000\000\000\000\000\000\000\054\000\000\000\000\000\
\000\000\055\000\056\000\057\000\058\000\059\000\060\000\061\000\
\062\000\063\000\064\000\065\000\066\000\052\000\067\000\068\000\
\000\000\000\000\000\000\054\000\000\000\000\000\000\000\055\000\
\056\000\057\000\058\000\059\000\060\000\000\000\000\000\063\000\
\064\000\065\000\066\000\000\000\067\000\068\000"

let yycheck = "\008\000\
\009\000\010\000\011\000\012\000\013\000\001\001\015\000\001\000\
\003\001\055\001\119\000\120\000\003\001\054\001\009\001\011\001\
\045\000\046\000\009\001\054\001\002\001\050\000\004\001\018\001\
\006\001\007\001\008\001\136\000\010\001\138\000\002\001\001\001\
\004\001\001\001\043\000\044\000\045\000\046\000\047\000\048\000\
\001\001\050\000\051\000\052\000\001\001\054\000\055\000\056\000\
\057\000\058\000\059\000\060\000\061\000\062\000\063\000\064\000\
\065\000\066\000\067\000\068\000\042\001\001\001\071\000\072\000\
\073\000\001\001\001\001\003\001\002\001\005\001\004\001\000\000\
\002\001\004\001\004\001\001\001\010\001\010\001\014\001\003\001\
\010\001\054\001\002\001\002\001\004\001\009\001\006\001\007\001\
\008\001\025\001\010\001\015\001\016\001\017\001\018\001\002\001\
\032\001\033\001\002\001\019\001\020\001\037\001\003\001\008\001\
\040\001\041\001\002\001\043\001\044\001\008\001\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\054\001\001\001\
\010\001\003\001\042\001\005\001\008\001\008\001\007\001\007\001\
\045\001\054\001\045\001\008\001\014\001\008\001\002\001\045\001\
\004\001\008\001\006\001\007\001\008\001\004\001\010\001\025\001\
\002\001\002\001\002\001\007\000\030\001\031\001\032\001\019\001\
\020\001\255\255\255\255\037\001\255\255\255\255\040\001\041\001\
\255\255\043\001\044\001\255\255\046\001\047\001\255\255\049\001\
\050\001\051\001\052\001\053\001\054\001\001\001\042\001\003\001\
\255\255\005\001\255\255\255\255\255\255\003\001\255\255\255\255\
\255\255\255\255\014\001\009\001\255\255\255\255\255\255\013\001\
\014\001\015\001\016\001\017\001\018\001\025\001\255\255\021\001\
\022\001\023\001\024\001\031\001\032\001\255\255\255\255\255\255\
\255\255\037\001\255\255\255\255\040\001\041\001\255\255\043\001\
\044\001\255\255\046\001\047\001\255\255\049\001\050\001\051\001\
\052\001\053\001\054\001\001\001\255\255\003\001\255\255\005\001\
\003\001\255\255\255\255\255\255\255\255\255\255\009\001\255\255\
\014\001\255\255\013\001\014\001\015\001\016\001\017\001\018\001\
\255\255\255\255\255\255\025\001\255\255\255\255\255\255\255\255\
\255\255\031\001\032\001\255\255\255\255\255\255\255\255\037\001\
\255\255\255\255\040\001\041\001\255\255\043\001\044\001\255\255\
\046\001\047\001\255\255\049\001\050\001\051\001\052\001\053\001\
\054\001\001\001\255\255\003\001\255\255\005\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\014\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\025\001\255\255\255\255\255\255\255\255\255\255\031\001\
\032\001\255\255\255\255\255\255\255\255\037\001\255\255\255\255\
\040\001\041\001\255\255\043\001\044\001\255\255\046\001\047\001\
\255\255\049\001\050\001\051\001\052\001\053\001\054\001\001\001\
\255\255\003\001\255\255\005\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\014\001\001\001\255\255\003\001\
\255\255\005\001\255\255\255\255\255\255\255\255\255\255\025\001\
\255\255\255\255\014\001\255\255\255\255\031\001\032\001\255\255\
\255\255\255\255\255\255\037\001\255\255\025\001\040\001\041\001\
\255\255\043\001\044\001\255\255\046\001\047\001\255\255\049\001\
\050\001\051\001\052\001\053\001\054\001\255\255\255\255\043\001\
\044\001\255\255\255\255\255\255\255\255\049\001\050\001\051\001\
\052\001\053\001\054\001\002\001\003\001\004\001\255\255\006\001\
\007\001\008\001\009\001\010\001\255\255\255\255\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\255\255\026\001\027\001\255\255\255\255\255\255\
\255\255\002\001\255\255\004\001\255\255\006\001\007\001\008\001\
\009\001\010\001\255\255\042\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\255\255\026\001\027\001\255\255\255\255\255\255\255\255\002\001\
\255\255\004\001\255\255\006\001\007\001\008\001\255\255\010\001\
\255\255\042\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\255\255\026\001\
\027\001\255\255\255\255\255\255\255\255\002\001\255\255\004\001\
\255\255\006\001\007\001\008\001\255\255\010\001\255\255\042\001\
\013\001\014\001\015\001\016\001\017\001\255\255\019\001\020\001\
\021\001\022\001\023\001\024\001\255\255\026\001\027\001\255\255\
\255\255\255\255\255\255\002\001\255\255\004\001\255\255\006\001\
\007\001\008\001\255\255\010\001\255\255\042\001\013\001\014\001\
\015\001\016\001\017\001\255\255\019\001\020\001\021\001\022\001\
\023\001\024\001\255\255\026\001\027\001\255\255\255\255\255\255\
\255\255\002\001\255\255\004\001\255\255\006\001\007\001\008\001\
\255\255\010\001\255\255\042\001\013\001\014\001\015\001\016\001\
\017\001\255\255\019\001\020\001\021\001\022\001\023\001\024\001\
\255\255\026\001\027\001\002\001\255\255\004\001\255\255\006\001\
\007\001\008\001\255\255\010\001\255\255\255\255\013\001\014\001\
\255\255\042\001\255\255\255\255\019\001\020\001\021\001\022\001\
\023\001\024\001\255\255\026\001\027\001\002\001\255\255\004\001\
\255\255\006\001\007\001\008\001\255\255\010\001\255\255\255\255\
\013\001\014\001\255\255\042\001\255\255\255\255\019\001\020\001\
\021\001\022\001\023\001\024\001\255\255\026\001\027\001\002\001\
\255\255\004\001\255\255\006\001\007\001\008\001\255\255\010\001\
\255\255\255\255\013\001\014\001\255\255\042\001\255\255\255\255\
\019\001\020\001\021\001\022\001\023\001\024\001\255\255\026\001\
\027\001\002\001\255\255\004\001\255\255\006\001\007\001\008\001\
\255\255\010\001\255\255\255\255\255\255\255\255\255\255\042\001\
\255\255\255\255\019\001\020\001\021\001\022\001\023\001\024\001\
\255\255\026\001\027\001\002\001\255\255\004\001\255\255\006\001\
\007\001\008\001\255\255\010\001\255\255\255\255\255\255\255\255\
\255\255\042\001\255\255\255\255\019\001\020\001\021\001\022\001\
\023\001\024\001\255\255\026\001\027\001\002\001\255\255\004\001\
\255\255\006\001\007\001\008\001\255\255\010\001\255\255\255\255\
\255\255\255\255\255\255\042\001\255\255\255\255\019\001\020\001\
\021\001\022\001\023\001\024\001\255\255\026\001\027\001\002\001\
\255\255\004\001\255\255\006\001\007\001\008\001\255\255\010\001\
\255\255\255\255\255\255\255\255\255\255\042\001\255\255\255\255\
\019\001\020\001\021\001\022\001\023\001\024\001\255\255\026\001\
\027\001\002\001\255\255\004\001\255\255\006\001\007\001\008\001\
\255\255\010\001\255\255\255\255\255\255\255\255\255\255\042\001\
\255\255\255\255\019\001\020\001\255\255\255\255\255\255\255\255\
\255\255\026\001\027\001\002\001\255\255\004\001\255\255\006\001\
\007\001\008\001\255\255\010\001\255\255\255\255\255\255\255\255\
\255\255\042\001\255\255\255\255\019\001\020\001\255\255\255\255\
\255\255\255\255\255\255\026\001\027\001\002\001\255\255\004\001\
\255\255\006\001\007\001\008\001\255\255\010\001\255\255\255\255\
\255\255\255\255\255\255\042\001\255\255\255\255\019\001\020\001\
\255\255\255\255\255\255\255\255\255\255\026\001\027\001\255\255\
\255\255\255\255\255\255\255\255\003\001\255\255\255\255\255\255\
\255\255\255\255\009\001\255\255\255\255\042\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\255\255\026\001\027\001\255\255\255\255\255\255\
\255\255\002\001\003\001\255\255\255\255\255\255\255\255\255\255\
\009\001\255\255\255\255\042\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\255\255\026\001\027\001\002\001\003\001\255\255\255\255\255\255\
\255\255\255\255\009\001\255\255\255\255\255\255\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\255\255\026\001\027\001\002\001\003\001\255\255\
\255\255\255\255\255\255\255\255\009\001\255\255\255\255\255\255\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\255\255\026\001\027\001\002\001\
\003\001\255\255\255\255\255\255\255\255\255\255\009\001\255\255\
\255\255\255\255\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\255\255\026\001\
\027\001\002\001\003\001\255\255\255\255\255\255\255\255\255\255\
\009\001\255\255\255\255\255\255\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\003\001\026\001\027\001\255\255\007\001\255\255\009\001\255\255\
\255\255\255\255\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\003\001\026\001\
\027\001\255\255\255\255\255\255\009\001\010\001\255\255\255\255\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\003\001\026\001\027\001\255\255\
\007\001\255\255\009\001\255\255\255\255\255\255\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\255\255\026\001\027\001\003\001\004\001\255\255\
\255\255\255\255\255\255\009\001\255\255\255\255\255\255\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\003\001\026\001\027\001\006\001\255\255\
\255\255\009\001\255\255\255\255\255\255\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\003\001\026\001\027\001\255\255\255\255\008\001\009\001\
\255\255\255\255\255\255\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\003\001\
\026\001\027\001\255\255\255\255\255\255\009\001\255\255\255\255\
\255\255\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\003\001\026\001\027\001\
\255\255\255\255\255\255\009\001\255\255\255\255\255\255\013\001\
\014\001\015\001\016\001\017\001\018\001\255\255\255\255\021\001\
\022\001\023\001\024\001\255\255\026\001\027\001"

let yynames_const = "\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LSQUAR\000\
  RSQUAR\000\
  SEMI\000\
  COLON\000\
  GET\000\
  COMMA\000\
  ASSIGN\000\
  AT\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  PERCENT\000\
  EXP\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  NOT\000\
  AND\000\
  OR\000\
  BREAK\000\
  CONST\000\
  ELSE\000\
  END\000\
  FOR\000\
  FUNCTION\000\
  IMPORT\000\
  LIST\000\
  MODEL\000\
  RETURN\000\
  RUN\000\
  SUBMODEL\000\
  WHILE\000\
  IF\000\
  IN\000\
  LINE\000\
  CIRCLE\000\
  PRINT\000\
  PRINTT\000\
  ENDOFPROGRAM\000\
  EOF\000\
  "

let yynames_block = "\
  TYPE\000\
  INTEGERLIT\000\
  FLOATLIT\000\
  CHARLIT\000\
  BOOLLIT\000\
  STRINGLIT\000\
  ID\000\
  PRESET\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'preset) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'bodies) in
    Obj.repr(
# 34 "parser.mly"
                                ( _2 )
# 586 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 37 "parser.mly"
           ( Preset(_1, _2) )
# 594 "parser.ml"
               : 'preset))
; (fun __caml_parser_env ->
    Obj.repr(
# 40 "parser.mly"
                  ( [], [] )
# 600 "parser.ml"
               : 'bodies))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'bodies) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl) in
    Obj.repr(
# 41 "parser.mly"
                ( (_2 :: fst _1), snd _1 )
# 608 "parser.ml"
               : 'bodies))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'bodies) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 42 "parser.mly"
                ( fst _1, (_2 :: snd _1) )
# 616 "parser.ml"
               : 'bodies))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 45 "parser.mly"
       ( _1 )
# 623 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : 'paras_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 49 "parser.mly"
 ({
    tp = _7;
		fname = _2;
		paras = _4;
		body = List.rev _9
    
	})
# 639 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 58 "parser.mly"
                    ( [] )
# 645 "parser.ml"
               : 'paras_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'paras_list) in
    Obj.repr(
# 59 "parser.mly"
                  ( List.rev _1 )
# 652 "parser.ml"
               : 'paras_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 62 "parser.mly"
                                   ( [(_1, _3)] )
# 660 "parser.ml"
               : 'paras_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'paras_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 63 "parser.mly"
                                    ( (_3, _5) :: _1 )
# 669 "parser.ml"
               : 'paras_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 66 "parser.mly"
                     ( [] )
# 675 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 67 "parser.mly"
                    ( _2 :: _1 )
# 683 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 70 "parser.mly"
                ( Expr(_1) )
# 690 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 71 "parser.mly"
                       ( Return(_2) )
# 697 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 73 "parser.mly"
      ( If(_3, _6, []) )
# 705 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 7 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : 'stmt_list) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 75 "parser.mly"
      ( If(_3, _6, _9) )
# 714 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 76 "parser.mly"
                                                   ( While(_3, _6) )
# 722 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 77 "parser.mly"
                                    ( Print(_3) )
# 729 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 78 "parser.mly"
                                     ( PrintT(_3) )
# 736 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 79 "parser.mly"
                                           ( For(_2, _4, _6) )
# 745 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 82 "parser.mly"
                  ( Noexpr )
# 751 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 83 "parser.mly"
           ( _1 )
# 758 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 86 "parser.mly"
                       ( Int(_1) )
# 765 "parser.ml"
               : 'digit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 87 "parser.mly"
                       ( Float(_1) )
# 772 "parser.ml"
               : 'digit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 90 "parser.mly"
                       ( Int(_1) )
# 779 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 91 "parser.mly"
                      ( Float(_1) )
# 786 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 92 "parser.mly"
                      ( Char(_1) )
# 793 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 93 "parser.mly"
                      ( Bool(_1) )
# 800 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 94 "parser.mly"
                      ( String(_1) )
# 807 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 95 "parser.mly"
                      ( Id(_1) )
# 814 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 96 "parser.mly"
                       ( Minus(_2))
# 821 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 97 "parser.mly"
                      ( Binop(_1, Add,   _3) )
# 829 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 98 "parser.mly"
                      ( Binop(_1, Sub,   _3) )
# 837 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 99 "parser.mly"
                      ( Binop(_1, Mult,  _3) )
# 845 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 100 "parser.mly"
                      ( Binop(_1, Div,   _3) )
# 853 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 101 "parser.mly"
                      ( Binop(_1, Equal, _3) )
# 861 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 102 "parser.mly"
                      ( Binop(_1, Neq,   _3) )
# 869 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 103 "parser.mly"
                      ( Binop(_1, Less,  _3) )
# 877 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 104 "parser.mly"
                      ( Binop(_1, Leq,   _3) )
# 885 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 105 "parser.mly"
                      ( Binop(_1, Greater,  _3) )
# 893 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 106 "parser.mly"
                      ( Binop(_1, Geq,   _3) )
# 901 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 107 "parser.mly"
                       ( Binop(_1, And,   _3) )
# 909 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 108 "parser.mly"
                       ( Binop(_1, Or,   _3) )
# 917 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 109 "parser.mly"
                        ( Binop(_1, Mod,   _3))
# 925 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 110 "parser.mly"
                       ( Binop(_1, Exp,   _3) )
# 933 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 111 "parser.mly"
                       ( Not(_2) )
# 940 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "parser.mly"
                      ( Assign(_1, _3) )
# 948 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 113 "parser.mly"
                                  ( Call(_1, _3) )
# 956 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
                        ( _2 )
# 963 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 115 "parser.mly"
                                    ( Dot(_2, _4) )
# 971 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
                    ( Get_Call(_1, _3) )
# 979 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 117 "parser.mly"
                                     ( Line(_3) )
# 986 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 118 "parser.mly"
                                       ( Circle(_3) )
# 993 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 119 "parser.mly"
                                ( List(_2) )
# 1000 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 120 "parser.mly"
                              ( ListEle(_1, _3) )
# 1008 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 125 "parser.mly"
                  ( [] )
# 1014 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 126 "parser.mly"
                   ( List.rev _1 )
# 1021 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 129 "parser.mly"
                            ( [_1] )
# 1028 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 130 "parser.mly"
                             ( _3 :: _1 )
# 1036 "parser.ml"
               : 'actuals_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
